[{"path":"https://hughjonesd.github.io/doctest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 doctest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hugh-Jones. Author, maintainer.","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hugh-Jones D (2022). doctest: Generate Tests Examples Using 'roxygen' 'testthat'. R package version 0.1.0, https://hughjonesd.github.io/doctest/.","code":"@Manual{,   title = {doctest: Generate Tests From Examples Using 'roxygen' and 'testthat'},   author = {David Hugh-Jones},   year = {2022},   note = {R package version 0.1.0},   url = {https://hughjonesd.github.io/doctest/}, }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest","dir":"","previous_headings":"","what":"Generate Tests From Examples Using roxygen and testthat","title":"Generate Tests From Examples Using roxygen and testthat","text":"Documentation examples tests share certain features. usually self-contained pieces code. cover software’s important functions typical uses. simple clear: complex examples hard users understand, complex test code can introduce testing bugs. similarity makes attractive use “doctests”, provide documentation testing. Indeed, several languages, including Python Rust, doctests built .1 R also checks errors examples running R CMD check. doctest package extends idea. lets write testthat tests, adding tags roxygen documentation. , well checking examples run, can also check supposed .","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Tests From Examples Using roxygen and testthat","text":"’s documentation function: Instead @examples section, @doctest section. create tests like: .Rd file created normal, example section like:","code":"#' Safe mean #'  #' @param x Numeric vector #' @return The mean of `x` #'  #' @export #' #' @doctest #'  #' @expect equal(2) #' safe_mean(1:3) #'  #' @expect warning(\"not numeric\") #' safe_mean(\"a\") #' #' @expect warning(\"NA elements\") #' safe_mean(c(1, NA)) safe_mean <- function (x) {   if (! is.numeric(x)) warning(\"x is not numeric\")   if (any(is.na(x))) warning(\"x contains NA elements\")   mean(x) } # File test-doctest-safe_mean.R # Generated by doctest: do not edit by hand  test_that(\"Example: safe_mean\", {   # Created from @doctest for `safe_mean`   # Source file: <text>   # Source line: 9   expect_equal(safe_mean(1:3), 2)   expect_warning(safe_mean(\"a\"), \"not numeric\")   expect_warning(safe_mean(c(1, NA)), \"NA elements\") }) \\examples{ safe_mean(1:3) safe_mean(\"a\") safe_mean(c(1, NA)) }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Tests From Examples Using roxygen and testthat","text":"can install development version doctest like : use doctest, alter package DESCRIPTION add doctest roclet roxygen, like : can also add doctest dependency: package directory run: normal create documentation. also create tests tests/testthat, named test-example-xxx.R. One file created example. present, can’t use doctest RStudio keyboard shortcut Ctrl + Shift + D, always uses standard roxygen2 roclets. However, can bind RStudio addin “Devtools: document package” keyboard shortcut. use roclets package DESCRIPTION file.","code":"devtools::install(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::dt_roclet\")) usethis::use_dev_package(\"doctest\", type = \"Suggests\",                           remote = \"hughjonesd/doctest\") roxygen2::roxygenize()"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest-tags","dir":"","previous_headings":"","what":"doctest tags","title":"Generate Tests From Examples Using roxygen and testthat","text":"doctest package adds five tags roxygen:","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest-1","dir":"","previous_headings":"doctest tags","what":"@doctest","title":"Generate Tests From Examples Using roxygen and testthat","text":"Use @doctest instead @examples: content @doctest used .Rd “examples” section, testthat test. can one @doctest section. section creates one test like test_that(\"Test name\", {...}). can name doctest, leave blank default name. sections merged single .Rd example.","code":"#' @doctest #'  #' # ... examples for your function #' @doctest Positive numbers #' x <- 1 #' @expect equal(x) #' abs(x) #' #' @doctest Negative numbers #' x <- -1 #' @expect equal(-x) #' abs(x)"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"expect","dir":"","previous_headings":"doctest tags","what":"@expect","title":"Generate Tests From Examples Using roxygen and testthat","text":"@expect writes testthat expectation. can use expect_* function testthat. Omit expect_ start call. expression next line substituted first argument expect call: Use dot . substitute different places: becomes:","code":"#' @expect equal(4) #' 2 + 2 expect_equal(2 + 2, 4) #' @expect equal(., rev(.)) #' c(\"T\", \"E\", \"N\", \"E\", \"T\") expect_equal(c(\"T\", \"E\", \"N\", \"E\", \"T\"), rev(c(\"T\", \"E\", \"N\", \"E\", \"T\")))"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"expectraw","dir":"","previous_headings":"doctest tags","what":"@expectRaw","title":"Generate Tests From Examples Using roxygen and testthat","text":"@expectRaw writes expectation, without substituting next expression:","code":"#' x <- 2 + 2 #' @expectRaw equal(x, 4)"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"skiptest-and-resumetest","dir":"","previous_headings":"doctest tags","what":"@skipTest and @resumeTest","title":"Generate Tests From Examples Using roxygen and testthat","text":"default, test uses whole example, since example code may depend previous code. @skipTest omits lines example test. @resumeTest stops omitting lines. can use skip irrelevant code code produces output.","code":"#' myfunc(1) #' @skipTest #' # No need to test plotting #' plot(1:10, my_func(1:10)) #' @resumeTest"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"how-to-use-doctest","dir":"","previous_headings":"","what":"How to use doctest","title":"Generate Tests From Examples Using roxygen and testthat","text":"like following advice: … write best possible documentation, [R] makes sure code samples documentation actually compile run [supposed ] Programming Rust, Blandy, Orendorff Tindall, 2021 particular, use doctest addition manually created tests, substitute . example, testing difficult corner cases usually appropriate documentation. Use doctest relatively simple tests basic functionality, catch user-visible output changes using expect_snapshot():","code":"#' @expect snapshot() summary(model)"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Generate Tests From Examples Using roxygen and testthat","text":"roxytest roxut packages allow write tests roxygen blocks. Doctest slightly different combines tests examples. exampletestr package uses roxygen examples generate test skeleton can fill .","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Write testthat tests and examples together — doctest-package","title":"Write testthat tests and examples together — doctest-package","text":"Doctest lets combine tests examples. information, see @doctest @expect.","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"example-1","dir":"Reference","previous_headings":"","what":"Example","title":"Write testthat tests and examples together — doctest-package","text":"documentation function:   Instead @examples section, @doctest section. create tests like:   .Rd file created normal, example section like:   use doctest package, add   DESCRIPTION file. may also optionally add doctest 'Suggests:' dependencies. run roxygen2::roxygenize() devtools::document() command line. Doctest .","code":"#' Safe mean #'  #' @param x Numeric vector #' @value The mean of `x` #'  #' @export #' #' @doctest #'  #' @expect equal(2) #' safe_mean(1:3) #'  #' @expect warning(\"not numeric\") #' safe_mean(\"a\") #' #' @expect warning(\"NA elements\") #' safe_mean(c(1, NA)) safe_mean <- function (x) {   if (! is.numeric(x)) warning(\"x is not numeric\")   if (any(is.na(x))) warning(\"x contains NA elements\")   mean(x) } # File test-examples-safe_mean.R # Generated by doctest: do not edit by hand  test_that(\"Example: safe_mean\", {   # Created from @examples for `safe_mean`   # Source file: '<text>'   # Source line: 9   expect_equal(safe_mean(1:3), 2)   expect_warning(safe_mean(\"a\"), \"not numeric\")   expect_warning(safe_mean(c(1, NA)), \"NA elements\") }) \\examples{ safe_mean(1:3) safe_mean(\"a\") safe_mean(c(1, NA)) } Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::dt_roclet\"))"},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write testthat tests and examples together — doctest-package","text":"Maintainer: David Hugh-Jones davidhughjones@gmail.com","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a  doctest — doctest-tag","title":"Start a  doctest — doctest-tag","text":"@doctest starts doctest.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start a  doctest — doctest-tag","text":"Use @doctest usually use @examples. add @expect @expectRaw tags beneath create expectations. can one @doctest tag. doctest create new test, merged single Rd example. default, test labelled \"Example: <object name>\" created. can put different label @doctest:","code":"#' @doctest Positive numbers #' #' x <- 1 #' @expect equal(x) #' abs(x) #' #' @doctest Negative numbers #' x <- -1 #' @expect equal(-x) #' abs(x)"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the doctest roclet — dt_roclet","title":"Create the doctest roclet — dt_roclet","text":"can use package DESCRIPTION like :","code":"Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::dt_roclet\"))"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the doctest roclet — dt_roclet","text":"","code":"dt_roclet()"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the doctest roclet — dt_roclet","text":"doctest roclet","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the doctest roclet — dt_roclet","text":"","code":"if (FALSE) { roxygen2::roxygenize(roclets = \"doctest::dt_roclet\") }"},{"path":"https://hughjonesd.github.io/doctest/reference/expect-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expectation — expect-tag","title":"Create an expectation — expect-tag","text":"@expect creates expectation example code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/expect-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an expectation — expect-tag","text":"Use @expect create testthat expectation.   next expression inserted first argument expect_* call. include expect_ prefix. want include expression different place places, use dot .:","code":"#' @examples #' #' @expect equals(4) #' 2 + 2 #' #' f <- function () warning(\"Watch out\") #' @expect warning() #' f() @expect equals(., rev(.)) c(\"T\", \"E\", \"N\", \"E\", \"T\")"},{"path":"https://hughjonesd.github.io/doctest/reference/expectRaw-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expectation as-is — expectRaw-tag","title":"Create an expectation as-is — expectRaw-tag","text":"@expect creates expectation example code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/expectRaw-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an expectation as-is — expectRaw-tag","text":"@expectRaw creates testthat expectation. Unlike @expect, insert next expression:   include expect_ prefix.","code":"#' @examples #' #'x <- 2 + 2 #' @expectRaw equals(x, 4) #' #' f <- function () warning(\"Watch out\") #' @expectRaw warning(f())"},{"path":"https://hughjonesd.github.io/doctest/reference/skipTest-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude example code from a test — skipTest-tag","title":"Exclude example code from a test — skipTest-tag","text":"@skipTest excludes following code test. @resumeTest stops excluding code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/skipTest-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude example code from a test — skipTest-tag","text":"Use tags avoid redundant noisy code:   Remember main purpose examples document package users. code getting different example, consider splitting proper test file. can renaming deleting Generated doctest comment.","code":"#' @examples #' #' @expect equal(0) #' sin(0) #' #' @skipTest #' curve(sin(x), 0, 2 * pi) #' @resumeTest #' #' @expect equal(1) #' cos(0)"}]
