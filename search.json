[{"path":"https://hughjonesd.github.io/doctest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 doctest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hugh-Jones. Author, maintainer.","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hugh-Jones D (2022). doctest: Generate Tests Examples Using 'roxygen' 'testthat'. R package version 0.1.0, https://hughjonesd.github.io/doctest/.","code":"@Manual{,   title = {doctest: Generate Tests From Examples Using 'roxygen' and 'testthat'},   author = {David Hugh-Jones},   year = {2022},   note = {R package version 0.1.0},   url = {https://hughjonesd.github.io/doctest/}, }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest","dir":"","previous_headings":"","what":"Generate Tests From Examples Using roxygen and testthat","title":"Generate Tests From Examples Using roxygen and testthat","text":"Documentation examples tests share certain features. usually self-contained pieces code. cover software’s important functions typical uses. simple clear: complex examples hard users understand, complex test code can introduce testing bugs. similarity makes attractive use “doctests”, provide documentation testing. Indeed, several languages, including Python Rust, doctests built .1 R also checks errors examples running R CMD check. doctest package extends idea. lets write testthat tests, adding tags roxygen documentation. , well checking examples run, can also check supposed .","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Tests From Examples Using roxygen and testthat","text":"’s documentation function: create tests like: .Rd file created normal, example section like:","code":"#' Safe mean #'  #' @param x Numeric vector #' @export #'  #' @examples #'  #' x <- safe_mean(1:3) #' @expect equal(x, 2) #'  #' @expect warning(., \"not numeric\") #' safe_mean(\"a\") #' #' @expect warning(., \"NA elements\") #' safe_mean(c(1, NA)) safe_mean <- function (x) {   if (! is.numeric(x)) warning(\"x is not numeric\")   if (any(is.na(x))) warning(\"x contains NA elements\")   mean(x) } #>  #> # File test-examples-safe_mean.R #> # Generated by doctest: do not edit by hand #>  #> test_that(\"Example: safe_mean\", { #> # Created from @examples for `safe_mean` #> # Source file: '<text>' #> # Source line: 7 #>   x <- safe_mean(1:3) #>   expect_equal(x, 2) #>   expect_warning(safe_mean(\"a\"), \"not numeric\") #>   expect_warning(safe_mean(c(1, NA)), \"NA elements\") #> }) #> \\examples{ #>  #> x <- safe_mean(1:3) #> safe_mean(\"a\") #> safe_mean(c(1, NA)) #> }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Tests From Examples Using roxygen and testthat","text":"can install development version doctest like : use doctest, alter package DESCRIPTION add doctest roclet roxygen, like : can also add doctest dependency: package directory run: normal create documentation. also create tests tests/testthat, named test-example-xxx.R. One file created example. present, can’t use doctest RStudio keyboard shortcut Ctrl + Shift + D, always uses standard roxygen2 roclets. However, can bind RStudio addin “Devtools: document package” keyboard shortcut. use roclets package DESCRIPTION file.","code":"devtools::install(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::doctest\")) usethis::use_dev_package(\"doctest\", type = \"Suggests\",                           remote = \"hughjonesd/doctest\") roxygen2::roxygenize()"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest-tags","dir":"","previous_headings":"","what":"doctest tags","title":"Generate Tests From Examples Using roxygen and testthat","text":"doctest package adds five tags roxygen:","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"expect","dir":"","previous_headings":"doctest tags","what":"@expect","title":"Generate Tests From Examples Using roxygen and testthat","text":"@expect writes testthat expectation. can use expect_* function testthat. Omit expect_ start. Use dot . substitute expression :","code":"#' #' @expect equal(1 + 1, 2) #' @expect equal(., 4) #' 2+2 #' #' @expect equal(., rev(.)) #' c(\"T\", \"E\", \"N\", \"E\", \"T\")"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"test","dir":"","previous_headings":"doctest tags","what":"@test","title":"Generate Tests From Examples Using roxygen and testthat","text":"default, expectations created single test, named example. @test <test-name> changes new test.","code":"#' @test Negative numbers #' @expect gt(0) #' abs(-1)"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"skiptest-and-resumetest","dir":"","previous_headings":"doctest tags","what":"@skipTest and @resumeTest","title":"Generate Tests From Examples Using roxygen and testthat","text":"default, test uses whole example, since example code may depend previous code. @skipTest omits lines example test. @resumeTest stops omitting lines. can use skip irrelevant material.","code":"#' @skipTest #' # No need to test plotting #' plot(1:10, my_func(1:10)) #' @resumeTest"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"testcomments","dir":"","previous_headings":"doctest tags","what":"@testComments","title":"Generate Tests From Examples Using roxygen and testthat","text":"roxygen works, can’t add expectations middle complex expressions like statements loops. example, won’t work: alternative, can use @testComments tag test expectations comments: Doctest comments follow format expectation tag, @expect replaced # expect. Comments must line, remain example code.","code":"#' if (x > 0) { #'   @expect gt(x, 0) #' } else { #'   @expect lt(x, 0) #' } #' @testComments #' if (x > 0) { #'   # expect gt(x, 0) #' } else { #'   # expect lt(x, 0) #' }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"how-to-use-doctest","dir":"","previous_headings":"","what":"How to use doctest","title":"Generate Tests From Examples Using roxygen and testthat","text":"doctest best used relatively simple tests. things get complex may better write test . like following advice: … write best possible documentation, [R] makes sure code samples documentation actually compile run [supposed ] Programming Rust, Blandy, Orendorff Tindall, 2021","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"empty-examples-section","dir":"","previous_headings":"Bugs and limitations","what":"Empty @examples section","title":"Generate Tests From Examples Using roxygen and testthat","text":"Roxygen may produce warning like @examples requires value. harmless. avoid , put R code @examples section first @expectation tag.","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"donttest-and-dontrun","dir":"","previous_headings":"Bugs and limitations","what":"donttest and dontrun","title":"Generate Tests From Examples Using roxygen and testthat","text":"donttest dontrun Rd tags ignored doctest. lets test code fail run R CMD CHECK. Howeer, tags must span one doctest tag. example, work: won’t, contains doctest tag: can work around using @testComments tag writing expectations comments.","code":"#' @expect error(\"argh\") #' \\dontrun{ #' stop(\"argh\") #' } #' \\dontrun{ #' @expect error(\"argh\") #' stop(\"argh\") #' }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Generate Tests From Examples Using roxygen and testthat","text":"roxytest package another way can write tests roxygen. Doctest aims slightly less verbose.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Write testthat files using roxygen tags — doctest-package","title":"Write testthat files using roxygen tags — doctest-package","text":"use doctest package, add   DESCRIPTION file. may also optionally add doctest 'Suggests:' dependencies.","code":"Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::doctest\"))"},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write testthat files using roxygen tags — doctest-package","text":"run roxygen2::roxygenize() devtools::document() command line. Doctest .","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write testthat files using roxygen tags — doctest-package","text":"Maintainer: David Hugh-Jones davidhughjones@gmail.com","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the doctest roclet — doctest","title":"Create the doctest roclet — doctest","text":"can use package DESCRIPTION like :","code":"Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::doctest\"))"},{"path":"https://hughjonesd.github.io/doctest/reference/doctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the doctest roclet — doctest","text":"","code":"doctest()"},{"path":"https://hughjonesd.github.io/doctest/reference/doctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the doctest roclet — doctest","text":"doctest roclet","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the doctest roclet — doctest","text":"","code":"if (FALSE) { roxygen2::roxygenize(roclets = \"doctest::doctest\") }"},{"path":"https://hughjonesd.github.io/doctest/reference/expect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expectation — expect","title":"Create an expectation — expect","text":"@expect creates expectation example code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/expect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an expectation — expect","text":"Use @expect create testthat expectation.   include expect_ prefix. Use dot . refer following expression:","code":"#' @examples #' #'x <- 2 + 2 #' @expect equals(x, 4) #' #' f <- function () warning(\"Watch out\") #' @expect warning(f()) @expect equals(., 4) 2 + 2 @expect length(., 10) rnorm(10)"},{"path":"https://hughjonesd.github.io/doctest/reference/skipTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude example code from a test — skipTest","title":"Exclude example code from a test — skipTest","text":"@skipTest excludes following code test. @resumeTest stops excluding code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/skipTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude example code from a test — skipTest","text":"Use tags avoid redundant noisy code:   Remember main purpose examples document package users. code getting different example, consider splitting proper test file.","code":"#' @examples #' #' @expect equal(., 0) #' sin(0) #' #' @skipTest #' curve(sin(x), 0, 2 * pi) #' @resumeTest #' #' @expect equal(., 1) #' cos(0)"},{"path":"https://hughjonesd.github.io/doctest/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a new test — test","title":"Start a new test — test","text":"@test starts new test.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start a new test — test","text":"default, test labelled \"Example: <object name>\" created. Use @test create separate tests within single example:","code":"#' @examples #' #' x <- 1 #' @expect equal(., x) #' abs(x) #' #' @test Negative numbers #' x <- -1 #' @expect equal(., -x) #' abs(x)"},{"path":"https://hughjonesd.github.io/doctest/reference/testComments.html","id":null,"dir":"Reference","previous_headings":"","what":"Write expectations in comments — testComments","title":"Write expectations in comments — testComments","text":"@testComments lets write expectations comments. may useful complex examples statements loops","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/testComments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write expectations in comments — testComments","text":"Doctests like work, test tags split example code roxygen parse .   alternative, put @testComments examples section write expectations comments:   Expectations comments match format expect tags, comment character # place @. Comments line, code:   Comments visible example.","code":"#' @examples #' #' if (x > 0) { #'   @expect gt(x, 0) #'   print(\"x is positive\") #' } else { #'   @expect lt(x, 0) #'   print(\"x is negative\") #' } #' @examples #' @testComments #' if (x > 0) { #'   # expect gt(x, 0) #'   print(\"x is positive\") #' } else { #'   # expect lt(x, 0) #'   print(\"x is negative\") #' } #' # Wrong: #' x <- 2 + 2 # expect equal(x, 4) #' #' # Right: #' x <- 2 + 2 #' # expect equal(x, 4) #' #' # Right: #' # expect equal(., 4) #' 2 + 2"}]
