[{"path":"https://hughjonesd.github.io/doctest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 doctest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"setting-up-doctest","dir":"Articles","previous_headings":"","what":"Setting up doctest","title":"Converting a package to use doctest","text":"first step, obviously, install doctest package: Doctest CRAN yet, don’t worry, don’t need add package dependency. can just use machine build package. Next, added doctest roclet dt_roclet onetime’S DESCRIPTION FILE: Now, whenever run devtools::document(), create doctests tests/testthat directory, well usual roxygen tasks like writing .Rd files. already tests/testthat set didn’t need anything direction. One caveat: hit Ctrl+Shift+D RStudio, won’t run doctest roclet. need type devtools::document() roxygen2::roxygenize() command line. Otherwise doctest tags won’t recognized.","code":"remotes::install_github(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\",                \"doctest::dt_roclet\"))"},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"converting-examples-to-doctest-sections","dir":"Articles","previous_headings":"","what":"Converting @examples to @doctest sections","title":"Converting a package to use doctest","text":"next step “Find files” @examples tags change @doctest tags. @doctest sections create examples Rd files, just like @examples sections. expected make difference output document().","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"before","dir":"Articles","previous_headings":"Converting @examples to @doctest sections","what":"Before","title":"Converting a package to use doctest","text":"","code":"#' @examples #' oo <- options(onetime.dir = tempdir(check = TRUE)) #' id <- sample(10000L, 1) #' ..."},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"after","dir":"Articles","previous_headings":"Converting @examples to @doctest sections","what":"After","title":"Converting a package to use doctest","text":"Indeed, ran devtools::document(), .Rd files unchanged, apart deleted empty lines examples. judged important, made first commit. stage, might want create new branch commits, using git branch command line, clicking “new branch” button RStudio. gung ho, just put commit master branch. made one exception: left @examples tag unchanged set_ok_to_store() function. function side effects user’s installation; testing needs done carefully. thought doctest need much complex setup, left . existing test set_ok_to_store() anyway.","code":"#' @doctest #' oo <- options(onetime.dir = tempdir(check = TRUE)) #' id <- sample(10000L, 1) #' ..."},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"creating-doctests-by-adding-expectations","dir":"Articles","previous_headings":"","what":"Creating doctests by adding expectations","title":"Converting a package to use doctest","text":"far, nothing actually changed. generate doctests examples, needed add expectations code. know testthat, doctest expectations look familiar. testthat, write: @doctest roxygen section, becomes: exp(1) part example code. Similarly, testthat might write: @doctest section might write: words: Use @expect tag create expectation. @expect, write testthat expectation, without expect_ prefix. next R expression @expect line becomes first argument expectation.","code":"expect_equal(exp(1), 2.71828183) #' @expect equal(2.71828183) #' exp(1) expect_warning(mean(\"foo\"), \"not numeric\") #' @expect warning(\"not numeric\") #' mean(\"foo\")"},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"doctests-for-messaging-functions","dir":"Articles","previous_headings":"","what":"Doctests for messaging functions","title":"Converting a package to use doctest","text":"started onetime’s messaging functions, print message warning . example, onetime_message_confirm() following @doctest section: want check example code runs, user indeed sees message. added expectation: simple. check everything working, ran devtools::document() . produced new file tests/testthat, called test-doctest-onetime_message_confirm.R: looked fine, ran tests using Ctrl+Shift+T, new test passed. Notice warning comment top test file. edit file, overwritten next time run doctest roclet. want edit manually, change name something without doctest, remove Generated doctest stamp. ’ll just normal testthat test can edit please. don’t want regenerate automated test file , remember edit relevant @doctest section, removing expectations replacing @doctest back @examples. next doctest complex. roxygen looked like : ’s fine use expectations inside loop, problem expected different things time. onetime_warning() shows warning first time called. first time round loop, expect warning. Afterwards expect output. unrolled loop, like : liked loop made clear onetime_warning() worked. wanted follow philosophy “write great documentation, add tests appropriate” rather “turn documentation test suite”. , bit bullet wrote complex expectation: bit ugly. uses fact expect_warning(regexp = NA) equivalent expecting warning. , first time round loop, expectation checks warning matching string \"\"; afterwards, checks warning. Notice @expect tag isn’t indented. Roxygen tags come straight starting #' characters, one space. , ran devtools::document() checked new test: Fine. ran test , passed. added similar tests made commit. set Github actions run R CMD check, knew tests also checked different platforms. Happily, passed.","code":"#' @doctest #' oo <- options(onetime.dir = tempdir(check = TRUE)) #' id <- sample(10000L, 1L) #' #' onetime_message_confirm(\"A message to show one or more times\", id = id) #' #' onetime_reset(id = id) #' options(oo) #' @doctest #' oo <- options(onetime.dir = tempdir(check = TRUE)) #' id <- sample(10000L, 1L) #' #' @expect message(\"A message\") #' onetime_message_confirm(\"A message to show one or more times\", id = id) #' #' onetime_reset(id = id) # Generated by doctest: do not edit by hand # Please edit file in R/messages.R  test_that(\"Doctest: onetime_message_confirm\", {   # Created from @doctest for `onetime_message_confirm`   # Source file: R/messages.R   # Source line: 110   oo <- options(onetime.dir = tempdir(check = TRUE))   id <- sample(10000L, 1L)   expect_message(onetime_message_confirm(\"A message to show one or more times\", id = id),   \"A message\")   onetime_reset(id = id)   options(oo) }) #' @doctest ... #' #' for (n in 1:3) { #'   onetime_warning(\"will be shown once\", id = id) #' } #' ... #' @expect warning() #' onetime_warning(\"will be shown once\", id = id) #' @expect silent() #' onetime_warning(\"will be shown once\", id = id) #' @expect silent() #' onetime_warning(\"will be shown once\", id = id) #' for (n in 1:3) { #' @expect warning(regexp = if (n == 1L) \"once\" else NA) #'   onetime_warning(\"will be shown once\", id = id) #' } for (n in 1:3) {     expect_warning(onetime_warning(\"will be shown once\", id = id), regexp = if (n ==     1L) \"once\" else NA)   }"},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"adding-doctests-for-utility-functions","dir":"Articles","previous_headings":"","what":"Adding doctests for utility functions","title":"Converting a package to use doctest","text":"Next added doctests utility functions, manipulate various aspects onetime’s -disk records. Mostly don’t print output, instead tested return value. example, onetime_been_done(), checks particular onetime call already made, got doctest like : function onetime_dir() simple just returns file path. example simple : decided just test first call onetime_dir(), confirming result ended subfolder passed . second call return temporary directory, different different R sessions, wasn’t sure test usefully. fact, skip unnecessary code test, used @omit tag: @omit omits everything generated test. code created simple test file test-doctest-onetime_dir.R: ran tests committed . Lastly, added tests final functions. ’s nothing new . can see commit GitHub.","code":"#' @expect false() #' onetime_been_done(id = id) #' onetime_message(\"Creating an ID\",  id = id) #' @expect true() #' onetime_been_done(id = id) #' @doctest #' #' onetime_dir(\"my-folder\") #' #' oo <- options(onetime.dir = tempdir(check = TRUE)) #' onetime_dir(\"my-folder\") #' options(oo) #' @expect match(\"my-folder$\") #' onetime_dir(\"my-folder\") #' #' @omit #' oo <- options(onetime.dir = tempdir(check = TRUE)) ... # Generated by doctest: do not edit by hand # Please edit file in R/utils.R  test_that(\"Doctest: onetime_dir\", {   # Created from @doctest for `onetime_dir`   # Source file: R/utils.R   # Source line: 138   expect_match(onetime_dir(\"my-folder\"), \"my-folder$\") })"},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"adding-doctest-to-suggests","dir":"Articles","previous_headings":"","what":"Adding doctest to Suggests:","title":"Converting a package to use doctest","text":"Now doctests working, decided make easy developers work package . onetime DESCRIPTION file, added doctest Suggests:, added Remotes: field pointing github repository. oneliner usethis package: tradeoff : adding doctest dependency help developers, CRAN doesn’t allow Remotes: fields packages. submit next version, ’ll remove dependency .","code":"usethis::use_dev_package(\"doctest\", type = \"Suggests\",                           remote = \"hughjonesd/doctest\")"},{"path":"https://hughjonesd.github.io/doctest/articles/conversion.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Converting a package to use doctest","text":"encouragingly easy. tests passed first time. Now can develop securely, knowing changes stop examples working, doctest help catch . followed principles making changes package: Start small, changing @examples tags @doctest tags. Doctest new package, want make sure doesn’t anything bad. (, please file bug report!) Obviously, make sure code checked version control using doctest. Keep doctests simple. Focus example code key role, teach user package. need make big changes, expectations becoming complex, consider splitting “proper” testthat test. many features doctest didn’t need use small package, including @expectRaw @snap tags generate expectations, @testRaw tag add code tests. can read package documentation main vignette: vignette(\"doctest\"). using doctest package, ’d love hear . github issue end users can add package. course, welcome bug reports, enhancement requests feedback. Happy testing!","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"introduction-to-doctest","dir":"Articles","previous_headings":"","what":"Introduction to doctest","title":"doctest","text":"Documentation examples tests similar ways: self-contained pieces code. cover software’s important functions typical uses. simple clear: complex examples hard users understand, complex test code can introduce testing bugs. similarity makes attractive use “doctests”, combine tests documentation. Indeed, several languages, including Python Rust, doctests built .1 R also checks errors examples running R CMD check. doctest package extends idea. lets write testthat tests, adding tags roxygen documentation. helps check examples supposed .","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"example","dir":"Articles","previous_headings":"Introduction to doctest","what":"Example","title":"doctest","text":"’s roxygen documentation function: Instead @examples section, @doctest section. create tests like: .Rd file created normal, example section like:","code":"#' Fibonacci function  #'  #' @param n Integer #' @return The nth Fibonacci number #'  #' @doctest #' #' @expect type(\"integer\") #' fib(2) #' #' n <- 6  #' @expect equal(8) #' fib(n) #'  #' @expect warning(\"not numeric\") #' fib(\"a\") #' #' @expect warning(\"NA\") #' fib(NA) fib <- function (n) {   if (! is.numeric(n)) warning(\"n is not numeric\")   ... } # Generated by doctest: do not edit by hand # Please edit file in R/<text>  test_that(\"Doctest: fib\", {   # Created from @doctest for `fib`   # Source file: <text>   # Source line: 7   expect_type(fib(2), \"integer\")   n <- 6   expect_equal(fib(n), 8)   expect_warning(fib(\"a\"), \"not numeric\")   expect_warning(fib(NA), \"NA\") }) \\examples{ fib(2)  n <- 6  fib(n) fib(\"a\") fib(NA) }"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"usage","dir":"Articles","previous_headings":"Introduction to doctest","what":"Usage","title":"doctest","text":"Install doctest CRAN: get development version: use doctest package, alter DESCRIPTION file add dt_roclet roclet roxygen: use roxygen2::roxygenize() devtools::document() build package documentation.","code":"install.packages(\"doctest\") devtools::install(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\",                \"doctest::dt_roclet\"))"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"adding-doctests-to-your-package","dir":"Articles","previous_headings":"Introduction to doctest","what":"Adding doctests to your package","title":"doctest","text":"’s simple workflow start using doctest: Alter package DESCRIPTION . roxygen documentation, replace @examples @doctest. package directory run roxygen2::roxygenize() devtools::document() create documentation. see Rd files created normal man/ directory, including \\examples sections. Add @expect tags @doctest sections. Run roxygenize() . now see new files created tests/testthat directory, name test-doctest-<topic name>.R. Run devtools::test() check tests pass. present, can’t use doctest RStudio keyboard shortcut Ctrl + Shift + D, always uses standard roxygen2 roclets. However, can bind RStudio addin “Devtools: document package” keyboard shortcut. use roclets package DESCRIPTION file. don’t need add doctest dependency package. Just like roxygen2 , can use create help files tests without installed users. However, may wish add Suggests:, help developers working package:","code":"usethis::use_package(\"doctest\", type = \"Suggests\")"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"tags","dir":"Articles","previous_headings":"Introduction to doctest","what":"Tags","title":"doctest","text":"doctest package adds tags roxygen:","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"doctest","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@doctest","title":"doctest","text":"Use @doctest instead @examples: content @doctest used .Rd “examples” section, testthat test. can one @doctest section. section creates one test like test_that(\"Test name\", {...}). can name doctest, leave blank default name. sections merged single .Rd example.","code":"#' @doctest #'  #' # ... examples for your function #' @doctest Positive numbers #' x <- 1 #' @expect equal(x) #' abs(x) #' #' @doctest Negative numbers #' x <- -1 #' @expect equal(-x) #' abs(x)"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"expect","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@expect","title":"doctest","text":"@expect writes testthat expectation. can use expect_* function testthat. Omit expect_ start call. expression next line substituted first argument expect call: Use dot . substitute different places: becomes:","code":"#' @expect equal(4) #' 2 + 2 expect_equal(2 + 2, 4) #' @expect equal(., rev(.)) #' c(\"T\", \"E\", \"N\", \"E\", \"T\") expect_equal(c(\"T\", \"E\", \"N\", \"E\", \"T\"), rev(c(\"T\", \"E\", \"N\", \"E\", \"T\")))"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"expectraw","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@expectRaw","title":"doctest","text":"@expectRaw writes expectation, without substituting next expression:","code":"#' x <- 2 + 2 #' @expectRaw equal(x, 4)"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"snap","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@snap","title":"doctest","text":"@snap shorthand @expect snapshot(). creates snapshot test, useful checking complex examples haven’t changed.","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"testraw","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@testRaw","title":"doctest","text":"@testRaw adds arbitrary line code test: Tests written contain least one @expect @expectRaw tag, use tags create expectations, @testRaw.","code":"#' @testRaw skip_on_cran(\"Takes too long to run\") #'  #' @expect equal(6765) #' fib(20)"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"omit-and-resume","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@omit and @resume","title":"doctest","text":"@testRaw includes line code test example, @omit opposite: includes following code example test. can use @resume restart including lines without creating new expectation. using @testRaw @omit lot, probably good idea separate test example. can renaming test-doctest- file, removing “Generated doctest” line within . change @doctest tag back @examples.","code":"#' myfunc(1) #'  #' @omit #' # No need to test plotting #' plot(1:10, my_func(1:10)) #'  #' @resume #' x <- NA #' @expect warning() #' myfunc(x)"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"doctestexample","dir":"Articles","previous_headings":"Introduction to doctest > Tags","what":"@doctestExample","title":"doctest","text":"@doctestExample filename.R includes R code filename.R example. drop-replacement roxygen2’s @example. R code isn’t checked doctest tags isn’t included tests.","code":""},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"caveats","dir":"Articles","previous_headings":"Introduction to doctest","what":"Caveats","title":"doctest","text":"Don’t use @doctest @examples topic. won’t work. Doctest currently ignores \\dontrun \\donttest macros. Potentially, lead dangerous code included tests. avoid , use @omit tag. @doctest section include complete self-contained example, work inside test_that expression. Don’t rely variables previous @doctest. can include expectations within e.g. blocks loops. Don’t forget roxygen tag must indented single space:","code":"#' # Right: #' if (TRUE) { #' @expect equals(4) #'   2+2 #' } #' # Wrong: #' if (TRUE) { #'   @expect equals(4) #'   2+2 #' }"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"writing-good-doctests","dir":"Articles","previous_headings":"Introduction to doctest","what":"Writing good doctests","title":"doctest","text":"Tests documentation similar, identical. Tests need cover difficult corner cases. Examples need convey basics user. like following advice: … write best possible documentation, [R] makes sure code samples documentation actually compile run [supposed ] Programming Rust, Blandy, Orendorff Tindall, 2021 particular, use doctest addition manually created tests, substitute . Use doctest make sure examples expect, simple tests basic functionality. ’s hard specify test , consider using @snap capture output: complex test cases, write test file manually. see example using doctest package “production”, check vignette(\"conversion\").","code":"#' @snap summary(model)"},{"path":"https://hughjonesd.github.io/doctest/articles/doctest.html","id":"related-packages","dir":"Articles","previous_headings":"Introduction to doctest","what":"Related packages","title":"doctest","text":"roxytest roxut packages allow write tests roxygen blocks. Doctest slightly different combines tests examples. exampletestr package uses roxygen examples generate test skeleton can fill .","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hugh-Jones. Author, maintainer.","code":""},{"path":"https://hughjonesd.github.io/doctest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hugh-Jones D (2023). doctest: Generate Tests Examples Using 'roxygen' 'testthat'. R package version 0.2.0.9000, https://hughjonesd.github.io/doctest/.","code":"@Manual{,   title = {doctest: Generate Tests from Examples Using 'roxygen' and 'testthat'},   author = {David Hugh-Jones},   year = {2023},   note = {R package version 0.2.0.9000},   url = {https://hughjonesd.github.io/doctest/}, }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"doctest","dir":"","previous_headings":"","what":"Generate Tests from Examples Using roxygen and testthat","title":"Generate Tests from Examples Using roxygen and testthat","text":"Documentation examples tests similar ways: self-contained pieces code. cover software’s important functions typical uses. simple clear: complex examples hard users understand, complex test code can introduce testing bugs. similarity makes attractive use “doctests”, combine tests documentation. Indeed, several languages, including Python Rust, doctests built .[1] R also checks errors examples running R CMD check. doctest package extends idea. lets write testthat tests, adding tags roxygen documentation. helps check examples supposed .","code":""},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Tests from Examples Using roxygen and testthat","text":"’s roxygen documentation function: Instead @examples section, @doctest section. create tests like: .Rd file created normal, example section like:","code":"#' Fibonacci function  #'  #' @param n Integer #' @return The nth Fibonacci number #'  #' @doctest #' #' @expect type(\"integer\") #' fib(2) #' #' n <- 6  #' @expect equal(8) #' fib(n) #'  #' @expect warning(\"not numeric\") #' fib(\"a\") #' #' @expect warning(\"NA\") #' fib(NA) fib <- function (n) {   if (! is.numeric(n)) warning(\"n is not numeric\")   ... } # Generated by doctest: do not edit by hand # Please edit file in R/<text>  test_that(\"Doctest: fib\", {   # Created from @doctest for `fib`   # Source file: <text>   # Source line: 7   expect_type(fib(2), \"integer\")   n <- 6   expect_equal(fib(n), 8)   expect_warning(fib(\"a\"), \"not numeric\")   expect_warning(fib(NA), \"NA\") }) \\examples{ fib(2)  n <- 6  fib(n) fib(\"a\") fib(NA) }"},{"path":"https://hughjonesd.github.io/doctest/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Tests from Examples Using roxygen and testthat","text":"Install doctest CRAN: get development version: use doctest package, alter DESCRIPTION file add dt_roclet roclet roxygen: use roxygen2::roxygenize() devtools::document() build package documentation. information, see package vignette. https://docs.python.org/3/library/doctest.html, https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html","code":"install.packages(\"doctest\") devtools::install(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\",                \"doctest::dt_roclet\"))"},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Write testthat tests for your examples, using roxygen tags — doctest-package","title":"Write testthat tests for your examples, using roxygen tags — doctest-package","text":"doctest package lets test code \"Examples\" section .Rd files. uses roxygen2 testthat packages. information, see @doctest @expect.","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"example","dir":"Reference","previous_headings":"","what":"Example","title":"Write testthat tests for your examples, using roxygen tags — doctest-package","text":"roxygen documentation function:   Instead @examples section, @doctest section. create tests like:   .Rd file created normal, example section like:","code":"#' Fibonacci function  #'  #' @param n Integer #' @return The nth Fibonacci number #'  #' @doctest #' #' @expect type(\"integer\") #' fib(2) #' #' n <- 6  #' @expect equal(8) #' fib(n) #'  #' @expect warning(\"not numeric\") #' fib(\"a\") #' #' @expect warning(\"NA\") #' fib(NA) fib <- function (n) {   if (! is.numeric(n)) warning(\"n is not numeric\")   ... } # Generated by doctest: do not edit by hand # Please edit file in R/<text>  test_that(\"Doctest: fib\", {   # Created from @doctest for `fib`   # Source file: <text>   # Source line: 7   expect_type(fib(2), \"integer\")   n <- 6   expect_equal(fib(n), 8)   expect_warning(fib(\"a\"), \"not numeric\")   expect_warning(fib(NA), \"NA\") }) \\examples{ fib(2)  n <- 6  fib(n) fib(\"a\") fib(NA) }"},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write testthat tests for your examples, using roxygen tags — doctest-package","text":"Install doctest CRAN:   get development version:   use doctest package, alter DESCRIPTION file add dt_roclet roclet roxygen:   use roxygen2::roxygenize() devtools::document() build package documentation. Doctest .","code":"install.packages(\"doctest\") devtools::install(\"hughjonesd/doctest\") Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\",                \"doctest::dt_roclet\"))"},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write testthat tests for your examples, using roxygen tags — doctest-package","text":"Maintainer: David Hugh-Jones davidhughjones@gmail.com","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a doctest — doctest-tag","title":"Start a doctest — doctest-tag","text":"@doctest starts doctest: code example also contains one testthat expectations.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctest-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start a doctest — doctest-tag","text":"Use @doctest usually use @examples. add @expect @expectRaw tags beneath create expectations. default, test labelled \"Example: <object name>\" created. can put different label @doctest:   can one @doctest tag roxygen block. doctest create new test, merged single Rd example. doctest must contain independent unit code. example, work:   test written @doctest section least one @expect @expectRaw . lets change @examples @doctest code, without generating unexpected tests.","code":"#' @doctest Positive numbers #' #' x <- 1 #' @expect equal(x) #' abs(x) #' #' @doctest Negative numbers #' x <- -1 #' @expect equal(-x) #' abs(x) #' @doctest Test x #' @expect equal(2) #' x <- 1 + 1 #' #' @doctest Keep testing x #' @expect equal(4) #' x^2 #' # Test will error, because `x` has not been defined here"},{"path":"https://hughjonesd.github.io/doctest/reference/doctestExample-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an example from a file — doctestExample-tag","title":"Add an example from a file — doctestExample-tag","text":"@doctestExample path//file.R drop-replacement @example path//file.R. add contents file.R test.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/doctestExample-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an example from a file — doctestExample-tag","text":"complex examples may want store separately. Roxygen2 uses @example tag . @doctestExample : adds contents file resulting example. Suppose man/R/example-code.R contains line:   following roxygen:   generate example like:   present, @doctestExample add code tests. @doctestExample added doctest 0.2.0.","code":"2 + 2 #' @doctest #' #' @expect equal(2) #' 1 + 1 #' @doctestExample man/R/example-code.R 1 + 1 2 + 2"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the doctest roclet — dt_roclet","title":"Create the doctest roclet — dt_roclet","text":"can use package DESCRIPTION like :","code":"Roxygen: list(roclets = c(\"collate\", \"rd\", \"namespace\", \"doctest::dt_roclet\"))"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the doctest roclet — dt_roclet","text":"","code":"dt_roclet()"},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the doctest roclet — dt_roclet","text":"doctest roclet","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/dt_roclet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the doctest roclet — dt_roclet","text":"","code":"if (FALSE) { roxygen2::roxygenize(roclets = \"doctest::dt_roclet\") }"},{"path":"https://hughjonesd.github.io/doctest/reference/expect-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expectation — expect-tag","title":"Create an expectation — expect-tag","text":"@expect creates expectation example code.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/expect-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an expectation — expect-tag","text":"Use @expect create testthat expectation.   next expression inserted first argument expect_* call. include expect_ prefix. want include expression different place places, use dot .:","code":"#' @doctest #' #' @expect equals(4) #' 2 + 2 #' #' f <- function () warning(\"Watch out\") #' @expect warning() #' f() @expect equals(., rev(.)) c(\"T\", \"E\", \"N\", \"E\", \"T\")"},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/expectRaw-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expectation as-is — expectRaw-tag","title":"Create an expectation as-is — expectRaw-tag","text":"@expectRaw creates expectation example code, without adding next expression subject.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/expectRaw-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an expectation as-is — expectRaw-tag","text":"@expectRaw creates testthat expectation. Unlike @expect, insert subsequent expression first argument.   include expect_ prefix.","code":"#' @doctest #' #' x <- 2 + 2 #' @expectRaw equals(x, 4) #' #' f <- function () warning(\"Watch out\") #' @expectRaw warning(f())"},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/omit-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude example code from a test — omit-tag","title":"Exclude example code from a test — omit-tag","text":"@omit excludes example code test next tag. Use @resume restart including code without creating expectation.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/omit-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude example code from a test — omit-tag","text":"Use @omit avoid redundant noisy code:   @omit separate \\donttest \\dontrun tags Rd files. allows test code cause error run R CMD CHECK. also want R CMD CHECK skip code, use \\donttest{} separately (see writing R extensions). Remember main purpose examples document package users. code getting different example, consider splitting proper test file. can renaming deleting Generated doctest comment.","code":"#' @doctest #' #' @expect equal(0) #' sin(0) #' #' @omit #' curve(sin(x), 0, 2 * pi) #' #' @expect equal(1) #' cos(0)"},{"path":"https://hughjonesd.github.io/doctest/reference/snap-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a snapshot test — snap-tag","title":"Create a snapshot test — snap-tag","text":"@snap creates snapshot test example. shorthand @expect snapshot().","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/snap-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a snapshot test — snap-tag","text":"Often, examples show complex output user. output changes, want check still \"looks right\". Snapshot tests help failing output changes, allowing review approve new output.","code":"#' @doctest #' #' @snap #' summary(lm(Petal.Width ~ Species, data = iris))"},{"path":[]},{"path":"https://hughjonesd.github.io/doctest/reference/testRaw-tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a line of code to the test — testRaw-tag","title":"Add a line of code to the test — testRaw-tag","text":"@testRaw adds arbitrary line code test, without including .Rd example.","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/testRaw-tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a line of code to the test — testRaw-tag","text":"@testRaw adds arbitrary line code test:   Unless doctest least one @expect @expectRaw tag, test created. use tags, @testRaw, add expectations. Remember main purpose examples document package users. code getting different example, consider splitting proper test file. can renaming deleting Generated doctest comment.","code":"#' @doctest #' @testRaw skip_on_cran(\"Takes too long\") #' @expect equal(6765) #' fibonacci(20)"},{"path":"https://hughjonesd.github.io/doctest/reference/test_doctests.html","id":null,"dir":"Reference","previous_headings":"","what":"Test doctests in a package — test_doctests","title":"Test doctests in a package — test_doctests","text":"utility function run doctests local source package. calls testthat::test_local().","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/test_doctests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test doctests in a package — test_doctests","text":"","code":"test_doctests(path = \".\", ...)"},{"path":"https://hughjonesd.github.io/doctest/reference/test_doctests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test doctests in a package — test_doctests","text":"path Path package ... Passed testthat::test_local().","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/test_doctests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test doctests in a package — test_doctests","text":"result testthat::test_local().","code":""},{"path":"https://hughjonesd.github.io/doctest/reference/test_doctests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test doctests in a package — test_doctests","text":"","code":"if (FALSE) {   test_doctests() }"},{"path":"https://hughjonesd.github.io/doctest/news/index.html","id":"doctest-development-version","dir":"Changelog","previous_headings":"","what":"doctest (development version)","title":"doctest (development version)","text":"Added @doctestExample tag drop-replacement @example. Error handling improved.","code":""},{"path":"https://hughjonesd.github.io/doctest/news/index.html","id":"doctest-020","dir":"Changelog","previous_headings":"","what":"doctest 0.2.0","title":"doctest 0.2.0","text":"CRAN release: 2023-04-28 First CRAN release. Added NEWS.md file track changes package. Fixed compatibility purrr 1.0.0. New vignette “Converting package use doctest”.","code":""}]
